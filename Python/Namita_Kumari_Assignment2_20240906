{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# ASSIGNMENT - 2\n",
        "\n",
        "# `Slicing In Python`   \n",
        "\n",
        "\n",
        "                             By- Namita Kumari\n",
        "                             Date- 2024-09-06"
      ],
      "metadata": {
        "id": "j8k-qhjRYguP"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Part - 1 : Basic** **Slicing**\n",
        "\n",
        "1. Introduction to Slicing :\n",
        "\n",
        " Given a string s = \"Hello, World\"!, slice and print the following :\n",
        "\n",
        "i. The entire string"
      ],
      "metadata": {
        "id": "pDVei4ChNZrd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Slice and print the entire string of given string s = \"Hello, World!\"\n",
        "s = \"Hello, World!\"\n",
        "print(s)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kHaPGtmlUoEB",
        "outputId": "7d62fdca-7fa6-407c-b0e5-48341da71f8a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello, World!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "ii. The first 5 characters"
      ],
      "metadata": {
        "id": "suwiUKxHWcQ5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# slice and print the first 5 characters of given string s = \"Hello, World\"!\n",
        "s = \"Hello, World!\"\n",
        "print(s[:5])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CaNMdlSyWjkk",
        "outputId": "f18186c0-7c64-43e1-8f7f-4c846a906683"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "iii. The last 5 characters"
      ],
      "metadata": {
        "id": "wa3KMws9XFm0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# slice and print the last 5 characters of a given string s = \"Hello, World\"!\n",
        "s = \"Hello, World!\"\n",
        "print(s[-5:])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CtKUa3mfXP6x",
        "outputId": "6378c19b-e203-4e15-8f3c-176cafa94017"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "orld!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "iv. The string excludes the first and the last characters"
      ],
      "metadata": {
        "id": "7zuMVpuYXkB_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# slice and print the string excludes the first and the last characters of a given string s = \"Hello, World!\"\n",
        "s = \"Hello, World!\"\n",
        "print(s[1:-1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "76P5vhWRXyog",
        "outputId": "84b5b028-8195-4808-9157-3293a75d4cea"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ello, World\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "v. Every second character in the string"
      ],
      "metadata": {
        "id": "SZI7CL-3YRR4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# slice and print every second character in the given string s = \"Hello, World!\"\n",
        "s = \"Hello, World!\"\n",
        "print(s[::2])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y41NLNKzYYiZ",
        "outputId": "bbecaef3-c85f-4581-be3a-bf5b797b90f3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hlo ol!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. Slicing with Negative Indices\n",
        "\n",
        "Use negative indices to slice and print the following from the string s = \"Hello, World!\"\n",
        "\n",
        "i. The last 3 characters"
      ],
      "metadata": {
        "id": "LMitBl3YYure"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# slice and print the last 3 characters of string s =  \"Hello, World!\"\n",
        "s = \"Hello, World!\"\n",
        "print(s[-3:])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zhUISYX4Z7TB",
        "outputId": "c5f1fb43-e7ae-4310-83dc-2cb157b29d04"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ld!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "ii. All the characters except the last 2 characters"
      ],
      "metadata": {
        "id": "5Go0XPd2aT5u"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# slice and print all the characters except the last 2 characters of string s = \"Hello, World!\"\n",
        "s = \"Hello, World!\"\n",
        "print(s[:-2])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4Qg1QcLdasZC",
        "outputId": "c13ef5bd-5ae1-43ad-f9d1-ee2984e77c6a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello, Worl\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "iii. The string reversed"
      ],
      "metadata": {
        "id": "HvMuimtwbAm0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# slice and print the string reversed of string s = \"Hello, World!\"\n",
        "s = \"Hello, World!\"\n",
        "print(s[::-1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hXkolDmWbHjT",
        "outputId": "43e62106-f791-4bb0-9420-1e18e002281f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "!dlroW ,olleH\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Part 2 : Advanced Slicing**\n",
        "\n",
        "1. Slicing Substrings:\n",
        "\n",
        "Given a string sentence = \"The quick brown fox jumps over the lazy dog\", slice and print the following:\n",
        "\n",
        "i. The word \"quick\""
      ],
      "metadata": {
        "id": "8n4SoTbLbYLu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# slice and print the word 'quick' from a string sentence = \"The quick brown fox jumps over the lazy dog\"\n",
        "sentence = \"The quick brown fox jumps over the lazy dog\"\n",
        "print(sentence[4:9])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dfKzMOi1OqB0",
        "outputId": "4e0c3c80-771a-48b2-ffb6-5c125e3dca74"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "quick\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "ii. The word \"lazy\""
      ],
      "metadata": {
        "id": "ORBP7_YhRIrx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#slice and print the word 'lazy' from a string sentence = \"The quick brown fox jumps over the lazy dog\"\n",
        "sentence = \"The quick brown fox jumps over the lazy dog\"\n",
        "print(sentence[-8:-4])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MFKVrHVscI2p",
        "outputId": "e51a403e-88a2-49c0-8ab1-168f631ec126"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "lazy\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "iii. The words \"brown fox jumps\""
      ],
      "metadata": {
        "id": "wa5n34k1dJR0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#slice and print the words 'brown fox jumps' from a string sentence = \"The quick brown fox jumps over the lazy dog\"\n",
        "sentence = \"The quick brown fox jumps over the lazy dog\"\n",
        "print(sentence[10:25])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RNBDMr7hdSSX",
        "outputId": "71a5b89f-f3bd-4321-ab53-7c82c220d933"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "brown fox jumps\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "2. Step Slicing:\n",
        "\n",
        "Use step slicing to print the followings from the string s:\n",
        "\n",
        "i. Every third character    "
      ],
      "metadata": {
        "id": "ltXeQePxf_kU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# slice and print every third character of string s=\"Hello, World!\"\n",
        "s = \"Hello, World!\"\n",
        "print(s[::3])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qlxPq3ozhRn_",
        "outputId": "b52c9ba3-fbc8-4456-b0f0-3173fabdb843"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hl r!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "ii. Every third character starting from the second character"
      ],
      "metadata": {
        "id": "zloNKX6KiFGg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#slice and print every third character starting from the second character of string s=\"Hello, World!\"\n",
        "s = \"Hello, World!\"\n",
        "print(s[1::3])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5wd9g2OPixLJ",
        "outputId": "a30e8e6e-f8e4-4e5f-ce47-3738062d5a57"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "eoWl\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "iii. The string reversed, stepping by 2"
      ],
      "metadata": {
        "id": "HGB_AhW9jJmw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#slice and print the string reversed, stepping by 2 of string s=\"Hello, World!\"\n",
        "s = \"Hello, World!\"\n",
        "print(s[::-2])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Fp0j78RtjVrC",
        "outputId": "9299ce8a-5661-49cb-9281-478787026885"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "!lo olH\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "###**Part 3: Practical Application :**\n",
        "\n",
        "1. Extracting Information:\n",
        "\n",
        "Given a string data = \"2024-09-01, Sunny,25 degree celcius, extract and print the following:\n",
        "\n",
        "i. The date"
      ],
      "metadata": {
        "id": "zeposhqWjuDW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        " # Extract and print the date of a given string data = \"2024-09-01, Sunny, 25 degree celcius\"\n",
        " data = \"2024-09-01, Sunny, 25 degree celcius\"\n",
        " print(data[:10])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6bjjYRtiCRe2",
        "outputId": "acd4dc99-9e77-4390-fcfa-5f0c18319b61"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-09-01\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "ii. The weather condition"
      ],
      "metadata": {
        "id": "A0CoyK8bC7MQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        " # \"Extract and print the weather condition of a given string data = \"2024-09-01, Sunny, 25 degree celcius\"\n",
        " data = \"2024-09-01, Sunny, 25 degree celcius\"\n",
        " print(data[12:17])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HNBQlqv8DIk8",
        "outputId": "085bc661-9504-457e-e963-53dfef9b4171"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sunny\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "iii. The temperature"
      ],
      "metadata": {
        "id": "Zx44DRcbDsQC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        " #  \"Extract and print the temperature of a given string data = \"2024-09-01, Sunny, 25 degree celcius\"\n",
        " data = \"2024-09-01, Sunny, 25 degree celcius\"\n",
        " data = \"2024-09-01, Sunny, 25 degree celcius\"\n",
        " print(data[19:36])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QlommHj8DwPa",
        "outputId": "fc37f639-15b3-479a-e87e-3d9a7b0c1596"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "25 degree celcius\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "2. Reformatting Strings:\n",
        "\n",
        " Given a string phone_number = \"(123) 456-7890\", reformat it to '123-456-7890'"
      ],
      "metadata": {
        "id": "Io704hkEEpbv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        " # Reformat a string phone_number = \"(123) 456-7890\" to '123-456-7890'\n",
        " phone_number = \"(123) 456-7890\"\n",
        " print(phone_number[1:4] + \"-\" + phone_number[6:9] + \"-\" + phone_number[10:])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QJ0pi9YbFoEw",
        "outputId": "60a83776-511c-479f-f3c3-8dd77541b0fb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "123-456-7890\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "***Part 4: Questions based on string methods ***\n",
        "\n",
        "1. Upper and lower case conversion:\n",
        "\n",
        "  i. Given a string s = \"Hello, World!\", covert string s to all uppercase letters"
      ],
      "metadata": {
        "id": "_lCZO7_IHMTG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# conversion of s = \"Hello, world!\" to all uppercase letters\n",
        "s = \"Hello, World!\"\n",
        "print(s.upper())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SbUnF4zZMHgA",
        "outputId": "20bd998f-d22c-483c-ff22-9b2406d0bc7f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "HELLO, WORLD!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "ii. Convert the string to all lowercases letters"
      ],
      "metadata": {
        "id": "lE7Z1SmbMh8p"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# conversion of s = \"Hello, world!\" to all lowercase letters\n",
        "s = \"Hello, World!\"\n",
        "print(s.lower())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WmQQQNCtNHbS",
        "outputId": "99bd5e62-7458-421e-fa6d-aa303ba53489"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "hello, world!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "iii. To convert the string to title case"
      ],
      "metadata": {
        "id": "IAKFJq1SNpPi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# conversion of s = \"Hello, world!\" to title case\n",
        "s = \"Hello, World!\"\n",
        "print(s.title())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MA8mpDqSPJOF",
        "outputId": "281bb467-276e-4c75-9a80-d58aede16348"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello, World!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "iv. To capitalize the first letter of the string"
      ],
      "metadata": {
        "id": "___yQrHTPzHf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# capitalization of the first letter of s = \"Hello, world!\"\n",
        "s = \"Hello, World!\"\n",
        "print(s.capitalize())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LpHNCliBQBlU",
        "outputId": "61f3bb60-b0a9-4819-f7cd-8410f457002a"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello, world!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "    2. Findig Substrings:\n",
        "\n",
        "Given a string s =\"The quick brown fox jumps over the lazy dog\", perform the following:\n",
        "\n",
        "a. Find the position of the substring \"fox\""
      ],
      "metadata": {
        "id": "7ExPd7rxQbR1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# finding the position of substring \"fox\" from string s=\"The quick brown fox jumps over the lazy dog\"\n",
        "s = \"The quick brown fox jumps over the lazy dog\"\n",
        "print(s.find(\"fox\"))"
      ],
      "metadata": {
        "id": "smUNSfcgTb4C",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dd87ad2c-f0c0-41bd-cb17-5a06c7ce9793"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "16\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "b. Check if the substring \"cat\" is in the string s"
      ],
      "metadata": {
        "id": "Q9hzUNxdRroE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking if the substring \"cat\" is in the string s = \"The quick brown fox jumps over the lazy dog\"\n",
        "s = \"The quick brown fox jumps over the lazy dog\"\n",
        "print(\"cat\" in s)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iKz5y-lMR5ik",
        "outputId": "e632a5b7-28e1-4555-b78e-3e638588ae35"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "    3. Replacing Substrings:\n",
        "\n",
        "  Given a string s= \"The quick brown fox jumps over the lazy dog\", perform the following:\n",
        "\n",
        "  a. Replace \"fox\" with \"cat\""
      ],
      "metadata": {
        "id": "BvcRBGPBSR7x"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# replacing \"fox\" with \"cat\" in given string s= \"The quick brown fox jumps over the lazy dog\"\n",
        "s = \"The quick brown fox jumps over the lazy dog\"\n",
        "print(s.replace(\"fox\", \"cat\"))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F67hIj3vTIMY",
        "outputId": "e4a5beda-cc19-439e-8162-b29004885f2c"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The quick brown cat jumps over the lazy dog\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "b. Replace all spsces with underscores"
      ],
      "metadata": {
        "id": "Avlk4zXyThZV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# replacing all spaces with underscores in given string s= \"The quick brown fox jumps over the lazy dog\"\n",
        "s = \"The quick brown fox jumps over the lazy dog\"\n",
        "print(s.replace(\" \", \"_\"))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SVbeYUTpTucg",
        "outputId": "c05697c2-b85d-4bdd-a897-2c1ece69caf7"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The_quick_brown_fox_jumps_over_the_lazy_dog\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "c. Split the string into a list of words"
      ],
      "metadata": {
        "id": "5OZaK1pOTvsQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# splitting the string s = \"The quick brown fox jumps over the lazy dog\" into a list of words\n",
        "s = \"The quick brown fox jumps over the lazy dog\"\n",
        "print(s.split())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4BcVP2NST2q4",
        "outputId": "49119520-46ab-48a4-faff-81de77e23671"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "d. Split the string by the letter 'o'"
      ],
      "metadata": {
        "id": "54SDX6x9T3PL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# splitting the string s = \"The quick brown fox jumps over the lazy dog\" ny the letter 'o'\n",
        "s = \"The quick brown fox jumps over the lazy dog\"\n",
        "print(s.split(\"o\"))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PG3X1aGwUmm4",
        "outputId": "4a23cb85-279f-40cc-f7c0-5aa4b816321d"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['The quick br', 'wn f', 'x jumps ', 'ver the lazy d', 'g']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "  4. Joining Strings\n",
        "\n",
        "  Given a list of words\n",
        "  \n",
        "        words = [\"The\", \"quick\", \"brown\", \"fox\"], perform the following:\n",
        "  \n",
        "  a.Join the words with spaces"
      ],
      "metadata": {
        "id": "U9e_WxRcU8fT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# joining the words of given list words = [\"The\", \"quick\", \"brown\", \"fox\"] with spaces\n",
        "words = [\"The\", \"quick\", \"brown\", \"fox\"]\n",
        "print(\" \".join(words))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K6YPv7YyVwFG",
        "outputId": "ce8b8c3a-d6b8-4074-ee12-ae5e6804bd63"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The quick brown fox\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "  b. Join the words with hyphens"
      ],
      "metadata": {
        "id": "qXM_IsS3Vwu6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#  joining the words of given list words = [\"The\", \"quick\", \"brown\", \"fox\"] with hyphens\n",
        "words = [\"The\", \"quick\", \"brown\", \"fox\"]\n",
        "print(\"-\".join(words))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jsj3ncrkV24S",
        "outputId": "6f8b43e1-68a3-40ed-dbf9-d5f7839440bc"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The-quick-brown-fox\n"
          ]
        }
      ]
    }
  ]
}
